칸반보드

설치해야하는거
style components + ts
react router
react query
recoil
==============

테마정의
src -> theme.ts

스타일컴포넌트에서는 우리가 지정한 스타일의 타입을 모르니까 정의해줘야함
src > styled.d.ts


theme.ts로 돌아와서 스타일 준거 타입 정의해줌 
import 아까 정의한 DefaultTheme
export const darktheme:DefaultTheme 



index.tsx
>> Themeprovider import 
>> import darktheme
  <ThemeProvider theme={darktheme}>
App 감싸주깅



recoil사용

import recoilRoot
모든 요소 감싸기
  <RecoilRoot>
    <ThemeProvider theme={darktheme}>
      <App />
    </ThemeProvider>
  </RecoilRoot>


global스탕리 사용
app.tsx 
import { createGlobalStyle } from "styled-components";

const GlobalStyle = createGlobalStyle
>> reset 스타일 적용
폰트 적용



=============

todolist.tsx 생성

input button 요소 만들기


useState가뭔가요?
상태관리함수

상태관리함수가 그거밖에없나요?

==============

input type=text
input type=password
textarea 
>> 하나의 컴포넌트 안에 다양한 폼태그 요소들을 경험 했던 적이 있었음

해당 요소중 변경되어지지않은 요소만 변경해주고자 
{...todo} 라고 전개연산자를 사용해썽ㅆ음

해당 방법밖에없을까?
>> 이걸 안하게해주는 hook이 있음
> react hook from
-> 한개의 단일 컴포넌트 안에 복수의 여러 form 태그 요소들을 사용하더라도 보다 효율적으로 관리할 수 있도록 해 주는 라이브러리
https://react-hook-form.com/

npm install react-hook-form


todoList.tsx
import useForm


register >> 요소안에 입력된 value 를 name 이라는 키 값ㅇ르 기준으로 저장하는 역할

watch >> 폼 요소안에 입력된 value를 확인 할 수 있도록 해주는 역할

handleSubmit(인자) >> form 요소 안에 입력된 value값을 submit 이라는 이벤트가 발생되었을 때, 객체형태로 변환하여 출력 해 주는 역할


form태그 안에 유효성검사도 가능하다!!
-몇 자 이상 입력하지 않으면 안된다던지
- 필수입력사항을 입력해야한다던지
        <input
          {...register("email", { required: true })}
          type="text"
          placeholder="write a email"
        />
이렇게 register인자값에 객체형태로 required : true 값을 주면된다.

만약에 최소 글자 설정하고싶으면 
minLength : 글자 수
{ required: true, minLength: 10 }


formState:폼 요소에 값이 입력 되었을 때 입력 된 값에 대한 정보를 보관 해 주는 역할
  //이렇게하면 내가 설정해놓은 필수값 혹은 최소길이 이런거에 부족해서 발생되는 에러를 찍어줌
  console.log(formState.errors);

required는 적게되면 무조건 true임 근데 문자열로 value값을 할당하게 되면 에러 발생 시 해당 문구 알려준다.

minlength 같은 경우 객체로 value, message 할당 가능하다





        {/* 문자열과 같은 타입일 것이야 라고 말해주는거 */}
        <span>{errors?.email?.message as string}</span>



=====================


react 회원가입 form
-password / password 확인
>>setError : 에러에 대한 커스터마이징이 가능하다.
    if (data.password !== data.usename) {
      setError("password", {
        message: "password and usename is not the same...",
      });
    }


setValue >> 
    setValue("email", "");

>> email 이라는 key값을 찾아서 빈 문자열로 바꿔라 ~






=========================
recoil >> propsdriling 방지하려고 사용
-> state management 를 관리하고자~
>> 모든 컴포넌트가 값을 받아오기 위해 atom이라는게 필요한다 ex) redux store




=========================
import atom

todoList
-input : value;
-기본값 : [todo1, todo2, todo3]
-삭제하기 수정하기 >> 이 기능을 사용하려면 무슨 형태로 저장이 되어야하는가 ? {} 객체 ! >> 얘를 삭제, 수정해야하는구나! 하는 id 값으로 찾아주기위해 ++ 생성된 날짜, 적어진 텍스트

atom에서 저장된 값을 찾아오고자 할 때 사용 할 수 있는 react hook >> useRecoilValue()

atom에 저장된 값을 수정하고자! 할때 사용할 수 있는 react hook -> useSetRecoilState()


  // atom에 저장된 todoState값을 value에 저장
  const value = useRecoilValue(toDoState);
  // atom에 저장 된 todoStatae값을 modFn에 저장해서 가져와서 수정한다?
  const modFn = useSetRecoilState(toDoState);
//useState로 치면 const modFn >> 뒤에 있는거 value >>앞에있는거
=====================================================

atrom안에 담겨있는 값을 가져 올 수도 있고, 편집 할수도 있도록 해주는거 
->   useRecoilState,
  const [value, modFn] = useRecoilState(toDoState);

각아이템 
[
  {
    id:1,
    text:"공부하기",
    category:"TO_DO"|"DOING"|"DONE"
  }
]

atoms >> 데이터관리 
createTodo>> input, 버튼 누르기, 데이터 전달
todo >> 값 출력

selector : store의 값ㅇ르 받아서 변환시켜서 그 값ㅇ르 반환